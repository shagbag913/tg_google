#!/usr/bin/env bash
#
DEBUG=$1

##
# Factory image / OTA download URL's
FACTURL="https://developers.google.com/android/images"
OTAURL="https://developers.google.com/android/ota"
DPURL="https://developer.android.com/preview/download"

##
# Contents of URL's
FACTURLCONTENT=$(curl $FACTURL)

##
# List of supported devices
DEVICES="crosshatch blueline taimen walleye marlin sailfish ryu angler bullhead"

##
# Google's sourcecode
GOOGLEGIT="https://android.googlesource.com"

fetch_ota_url_content() {
    OTAURLCONTENT=$(curl $OTAURL)
}

is_dp_month() {
    # return 1 if it's not march thru august
    MONTH=$(date +%m | sed -n 's/^0//p')
    for i in $(seq 3 8); do
        if [[ $i = $MONTH ]]; then
            MATCH=true
        fi
    done
    [[ $MATCH = true ]] || return 1
}

if is_dp_month; then
    DPURLCONTENT=$(curl $DPURL)
fi

build_id() {
    BUILDID_FILE="./devices/$1/build_ids"
    [[ -f $(dirname $BUILDID_FILE) ]] || mkdir -p $(dirname $BUILDID_FILE)
    OLD_BUILDIDS=$(cat $BUILDID_FILE)
    NEW_BUILDIDS=$(echo "$FACTURLCONTENT" | sed -n 's/<tr id="'"$1"'//p' | sed -n 's/">//p' | cut -d ' ' -f 3)
    if [[ "$OLD_BUILDIDS" != "$NEW_BUILDIDS" && -n "$NEW_BUILDIDS" ]]; then
        NEW_BUILDID=$(diff -u <(echo "$NEW_BUILDIDS") <(echo "$OLD_BUILDIDS") | sed -n '1!p' | sed -n 's/^-//p')
        echo "$NEW_BUILDIDS" > $BUILDID_FILE
        echo "$1 new build id: $NEW_BUILDID"
    else
        return 1
    fi
}

tags() {
    TAG_FILE="./tags/$1/tags"
    [[ -f $(dirname $TAG_FILE) ]] || mkdir -p $(dirname $TAG_FILE)
    OLD_TAGS=$(cat $TAG_FILE)
    NEW_TAGS=$(git ls-remote --refs --tags $GOOGLEGIT/$1 | sed -n 's/.*refs\/tags\///p')
    if [[ "$NEW_TAGS" != "$OLD_TAGS" && -n "$NEW_TAGS" ]]; then
        NEW_TAG=$(diff -u <(echo "$NEW_TAGS") <(echo "$OLD_TAGS") | tail -n +3 | grep -e ^- -e ^+)
        echo "$NEW_TAGS" > $TAG_FILE
        echo "$1 new tag: $NEW_TAG"
    else
        return 1
    fi
}

dp() {
    if ! is_dp_month || [[ -z "$DPURLCONTENT" ]]; then return 1; fi
    URL_FILE="./devices/$1/developer_preview"
    [[ -d $(dirname $URL_FILE) ]] || mkdir -p $(dirname $URL_FILE)
    [[ -f $URL_FILE ]] || touch $URL_FILE
    NEWDPDEVICEURL=$(echo "$DPURLCONTENT" | grep $1 | sed -n 's/.*href=//p' | tr -d '"' | tr -d ' ')
    OLDDPDEVICEURL=$(cat $URL_FILE | tr -d ' ')
    if echo "$OLDDPDEVICEURL" | grep $NEWDPDEVICEURL &>/dev/null || \
        [[ -z $NEWDPDEVICEURL && -z $OLDDPDEVICEURL ]]; then
        return 1
    else
        DPBUILDID=$(echo $NEWDPDEVICEURL | awk -F'[-|-]' '{print $2}')
        echo $NEWDPDEVICEURL >> $URL_FILE
        echo "$1 new developer preview: $NEWDPDEVICEURL"
    fi
}

for device in $DEVICES; do
    if build_id $device; then
        EVENT=true
        for id in $NEW_BUILDID; do
            FACT_BUILDURL=$(echo "$FACTURLCONTENT" | sed -n 's/.*<td><a href=\"//p' | tr -d '"' | grep "$device-$id")
            OTA_BUILDURL=$(echo "$OTAURLCONTENT" | sed -n 's/.*<td><a href=\"//p' | sed -n 's/">.*//p' | grep "$device-ota-$id")
            until [[ -n $OTA_BUILDURL ]]; do
                fetch_ota_url_content
                OTA_BUILDURL=$(echo "$OTAURLCONTENT" | sed -n 's/.*<td><a href=\"//p' | sed -n 's/">.*//p' | grep "$device-ota-$id")
            done
            MSG="\`$id\` has been released.%0A    - Factory image: [Download]($FACT_BUILDURL)%0A    - OTA: [Download]($OTA_BUILDURL)%0A$MSG"
        done
    fi
    if dp $device; then
        EVENT=true
        MSG="\`$DPBUILDID\` developer preview has been released.%0A    - Factory image: [Download]($NEWDPDEVICEURL)%0A$MSG"
    fi
    if [[ $EVENT = true ]]; then
        MSG="%0A*$device*%0A$MSG"
    fi
    unset EVENT
    unset OTA_BUILDURL
done

REPOS=(
    'platform/manifest'
    'kernel/msm'
)

for repo in "${REPOS[@]}"; do
    if tags $repo; then
        for tag in $NEW_TAG; do
            if echo $tag | grep ^- &>/dev/null; then
                TAG=$(sed -n 's/^-//p' <<< $tag)
                MSG="    - New tag: [$TAG]($GOOGLEGIT/$repo/%2B/$TAG)%0A$MSG"
            elif echo $tag | grep ^+ &>/dev/null; then
                TAG=$(sed -n 's/^+//p' <<< $tag)
                TAG=$(sed 's/_/\\_/p' <<< $TAG | head -n 1)
                MSG="    - Tag removed: $TAG%0A$MSG"
            fi
        done
        MSG="%0A*$repo*%0A$MSG"
    fi
done

if [[ -n $MSG ]]; then
    if [[ $DEBUG = false ]]; then
        tg_bot -p pm -p au -m "$MSG"
    else
        tg_bot -p pm -m "$MSG"
    fi
fi
